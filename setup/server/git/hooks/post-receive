#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright, 2016, by Samuel G. D. Williams. <http://www.codeotaku.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require "etc"

# Add the following into sudoers for this to work correctly:
# Users in group wheel can execute all commands as user http with no password.
# %wheel ALL=(http) NOPASSWD: ALL

GIT_WORK_TREE = `git config core.worktree`.chomp

# We convert GIT_DIR to an absolute path:
ENV["GIT_DIR"] = File.join(Dir.pwd, ENV["GIT_DIR"])

# We deploy the site as the user and group of the directory for the working tree:
File.stat(GIT_WORK_TREE).tap do |stat|
	ENV["DEPLOY_USER"] = DEPLOY_USER = Etc.getpwuid(stat.uid).name
	ENV["DEPLOY_GROUP"] = DEPLOY_GROUP = Etc.getgrgid(stat.gid).name
end

WHOAMI = `whoami`.chomp!

# We should find out if we need to use sudo or not:
SUDO = if WHOAMI != DEPLOY_USER
	["sudo", "-u", DEPLOY_USER]
end

CommandFailure = Class.new(StandardError)

def sh(command)
	puts command.join(" ")
	unless system(*command)
		raise CommandFailure.new("#{command.join(' ')} failed with #{$?}!")
	end
end

def sudo(command)
	sh([*SUDO, *command])
end

puts "Deploying to #{GIT_WORK_TREE} as #{DEPLOY_USER}:#{DEPLOY_GROUP}..."
Dir.chdir(GIT_WORK_TREE) do
	sudo %W{git checkout -f}
	sudo %W{git submodule update --init}
	
	if File.exist? "gems.rb"
		sudo %W{bundle install}
	end
	
	if File.exist? "bake.rb"
		sudo %W{bundle exec bake deploy restart}
	elsif File.exist? "Rakefile"
		sudo %W{bundle exec rake deploy restart}
	end
end
